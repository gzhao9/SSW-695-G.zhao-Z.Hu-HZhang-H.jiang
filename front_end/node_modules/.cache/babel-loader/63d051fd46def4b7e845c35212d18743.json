{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\SSW-695-G.zhao-Z.Hu-HZhang-H.jiang\\\\front_end\\\\react_front_end\\\\src\\\\Components\\\\FoodInfoList\\\\NutritionInfoBlock.jsx\";\nimport React from 'react';\nimport { Table } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NutritionInfoBlock(props) {\n  const {\n    totalCarbo,\n    totalFat,\n    totalProtein\n  } = props;\n  let totalWeight = totalCarbo + totalFat + totalProtein;\n  let carboRate = totalCarbo / totalWeight;\n  let fatRate = totalFat / totalWeight;\n  let proteinRate = totalProtein / totalWeight;\n  const column = [{\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name'\n  }, {\n    title: 'Rate (%)',\n    dataIndex: 'rate',\n    key: 'rate'\n  }, {\n    title: 'Weight (g)',\n    dataIndex: 'weight',\n    key: 'weight'\n  }];\n  const dataSource = [{\n    key: '1',\n    name: 'Carbohydrates',\n    rate: Math.round(carboRate * 10000) / 100,\n    weight: Math.round(totalCarbo * 100) / 100\n  }, {\n    key: '2',\n    name: 'Proteins',\n    rate: Math.round(proteinRate * 10000) / 100,\n    weight: Math.round(totalProtein * 100) / 100\n  }, {\n    key: '3',\n    name: 'Fat',\n    rate: Math.round(fatRate * 10000) / 100,\n    weight: Math.round(totalFat * 100) / 100\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      columns: column,\n      dataSource: dataSource,\n      pagination: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_c = NutritionInfoBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"NutritionInfoBlock\");","map":{"version":3,"sources":["C:/Users/admin/Documents/GitHub/SSW-695-G.zhao-Z.Hu-HZhang-H.jiang/front_end/react_front_end/src/Components/FoodInfoList/NutritionInfoBlock.jsx"],"names":["React","Table","NutritionInfoBlock","props","totalCarbo","totalFat","totalProtein","totalWeight","carboRate","fatRate","proteinRate","column","title","dataIndex","key","dataSource","name","rate","Math","round","weight"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,MAAtB;;AAGA,eAAe,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAC9C,QAAM;AAACC,IAAAA,UAAD;AAAaC,IAAAA,QAAb;AAAuBC,IAAAA;AAAvB,MAAuCH,KAA7C;AACA,MAAII,WAAW,GAAGH,UAAU,GAACC,QAAX,GAAoBC,YAAtC;AACA,MAAIE,SAAS,GAAGJ,UAAU,GAAGG,WAA7B;AACA,MAAIE,OAAO,GAAGJ,QAAQ,GAAGE,WAAzB;AACA,MAAIG,WAAW,GAAGJ,YAAY,GAAGC,WAAjC;AACA,QAAMI,MAAM,GAAG,CACX;AACEC,IAAAA,KAAK,EAAE,MADT;AAEEC,IAAAA,SAAS,EAAE,MAFb;AAGEC,IAAAA,GAAG,EAAE;AAHP,GADW,EAMX;AACEF,IAAAA,KAAK,EAAE,UADT;AAEEC,IAAAA,SAAS,EAAE,MAFb;AAGEC,IAAAA,GAAG,EAAE;AAHP,GANW,EAWX;AACEF,IAAAA,KAAK,EAAE,YADT;AAEEC,IAAAA,SAAS,EAAE,QAFb;AAGEC,IAAAA,GAAG,EAAE;AAHP,GAXW,CAAf;AAgBA,QAAMC,UAAU,GAAG,CACf;AACED,IAAAA,GAAG,EAAE,GADP;AAEEE,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWX,SAAS,GAAG,KAAvB,IAAgC,GAHxC;AAIEY,IAAAA,MAAM,EAAEF,IAAI,CAACC,KAAL,CAAWf,UAAU,GAAG,GAAxB,IAA+B;AAJzC,GADe,EAOf;AACEU,IAAAA,GAAG,EAAE,GADP;AAEEE,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWT,WAAW,GAAG,KAAzB,IAAkC,GAH1C;AAIEU,IAAAA,MAAM,EAAEF,IAAI,CAACC,KAAL,CAAWb,YAAY,GAAG,GAA1B,IAAiC;AAJ3C,GAPe,EAaf;AACEQ,IAAAA,GAAG,EAAE,GADP;AAEEE,IAAAA,IAAI,EAAE,KAFR;AAGEC,IAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWV,OAAO,GAAG,KAArB,IAA8B,GAHtC;AAIEW,IAAAA,MAAM,EAAEF,IAAI,CAACC,KAAL,CAAWd,QAAQ,GAAG,GAAtB,IAA6B;AAJvC,GAbe,CAAnB;AAoBA,sBACI;AAAA,2BACI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAEM,MAAhB;AAAwB,MAAA,UAAU,EAAEI,UAApC;AAAgD,MAAA,UAAU,EAAE;AAA5D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;KA/CuBb,kB","sourcesContent":["import React from 'react'\r\nimport { Table } from 'antd'\r\n\r\n\r\nexport default function NutritionInfoBlock(props) {\r\n    const {totalCarbo, totalFat, totalProtein} = props\r\n    let totalWeight = totalCarbo+totalFat+totalProtein\r\n    let carboRate = totalCarbo / totalWeight\r\n    let fatRate = totalFat / totalWeight\r\n    let proteinRate = totalProtein / totalWeight\r\n    const column = [\r\n        {\r\n          title: 'Name',\r\n          dataIndex: 'name',\r\n          key: 'name',\r\n        },\r\n        {\r\n          title: 'Rate (%)',\r\n          dataIndex: 'rate',\r\n          key: 'rate',\r\n        },\r\n        {\r\n          title: 'Weight (g)',\r\n          dataIndex: 'weight',\r\n          key: 'weight',\r\n        }]\r\n    const dataSource = [\r\n        {\r\n          key: '1',\r\n          name: 'Carbohydrates',\r\n          rate: Math.round(carboRate * 10000) / 100,\r\n          weight: Math.round(totalCarbo * 100) / 100\r\n        },\r\n        {\r\n          key: '2',\r\n          name: 'Proteins',\r\n          rate: Math.round(proteinRate * 10000) / 100,\r\n          weight: Math.round(totalProtein * 100) / 100\r\n        },\r\n        {\r\n          key: '3',\r\n          name: 'Fat',\r\n          rate: Math.round(fatRate * 10000) / 100,\r\n          weight: Math.round(totalFat * 100) / 100\r\n        },\r\n      ];\r\n    return (\r\n        <div>\r\n            <Table columns={column} dataSource={dataSource} pagination={false}></Table>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}